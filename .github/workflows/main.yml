name: Example of cURL action

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  test-curl-action:
    name: "Perform REST API request"
    runs-on: ubuntu-windows-runner
    steps:
      - name: "Call API"
        uses: indiesdev/curl@v1.1
        id: api
        with:
          # The target URL
          # Required: true if custom-config is not set
          url: https://wmintanywhere.int-aw-au.webmethods.io/integration/rest/origin/agent/generatecode/

          # The request method, basically it's one of GET|POST|PUT|PATCH
          # Default is GET
          method: "POST"

          # List of response status codes to be accepted, else it will set the job to be failed
          # If more than one value is needed, you can use comma (,) as separator
          # In this case if the response status code is not one of 200, 201 and 204, the job will be failed
          # Default is 200,201,204
          accept: 200,201,204

          # Headers can be passed through with a json object string
          headers: '{"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36","sec-ch-ua-platform":"\"Windows\"","environment":"","sec-ch-ua-mobile":"?0","Connection":"keep-alive", "Content-Type":"application/json", "Accept":"application/json, text/plain, */*", "Accept-Encoding":"gzip, deflate, br","Accept-Language":"en,fr;q=0.9,en-US;q=0.8,es;q=0.7,uk;q=0.6","Cookie":"${{ vars.HEADER_COOKIE_ERT }}","Origin":"https://wmintanywhere.int-aw-au.webmethods.io","Referer":"https://wmintanywhere.int-aw-au.webmethods.io/","Sec-Fetch-Dest":"empty","Sec-Fetch-Mode":"cors","Sec-Fetch-Site":"same-origin","authtoken":"fl77985e08cc1604cd267656","x-csrf-token":"506056e7-9125-4334-8dc7-fd7d389842a5"}'
          
          # Params can be passed through with a json object string
         # params: '{ "param1": "value", "param2": "value2" }'

          # Body request
          # Apply only to POST|PUT request
          body: '{"name":"RAHS_ERT_CICD_POC005","description":""}'

          # Request timeout (millisec)
          # Default: 1000
          timeout: 10000

          # Basic authentication using username and password
          # This will override the Authorization header, for example Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l
          # Format => username:password as base 64
         # basic-auth-token: ${{ secrets.curl_auth_token }}

          # The authentication using token
          # This will override the Authorization header, for example Authorization: Bearer QWxhZGRpbjpPcGVuU2VzYW1l
          #bearer-token: ${{ secrets.bearer_token }}

          # If you want to use proxy with the request, you can use proxy-url
          # Format => host:port
         # proxy-url: https://proxy-url:3000

          # If the proxy host requires authentication, you can use proxy-auth to pass credentials
          # Format => username:password as base64
        #  proxy-auth-token: ${{ secrets.proxy_auth_token }}

          # If it is set to true, it will show the response log in the GitHub UI
          # Default: false
          log-response: true
  
          # The number of attempts before giving up
          # Default: 1
          retries: 3

          # If you want to use axios config directly, you can pass a config file to the action
          # The file is just basically a json file that has the same format as axios config https://github.com/axios/axios#request-config
          # If this input is set, it will ignore other inputs related to the config
          # The path file is relative to the root directory of the repo
         # custom-config: .github/workflows/curl-config.json
      - name: "Use response"
        run: echo '${{ fromJson(steps.api.outputs.response).data['name'] }}'
      - uses: actions/checkout@v3
      - name: Docker Containers
        run: docker run -p 5555:5555 -d -e SAG_IS_CLOUD_REGISTER_URL=https://wmintanywhere.int-aw-au.webmethods.io -e SAG_IS_EDGE_TENANT_ID=wmintanywhere -e SAG_IS_EDGE_CLOUD_ALIAS=${{ fromJson(steps.api.outputs.response).data['name'] }} -e SAG_IS_CLOUD_REGISTER_TOKEN=${{ fromJson(steps.api.outputs.response).data['code'] }} --name=${{ fromJson(steps.api.outputs.response).data['name'] }} iregistry.eur.ad.sag/origin/webmethods-edge-runtime:latest
        #run: docker ps
